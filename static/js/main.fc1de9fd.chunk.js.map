{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistList/todolists-reducer.ts","features/TodolistList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistList/Todolist/Task/Task.tsx","features/TodolistList/Todolist/Todolist.tsx","features/TodolistList/TodolistList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx","app/App.module.css","features/TodolistList/Todolist/Todolist.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitle","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setAppInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistAC","map","todolistReducer","removeTaskAC","tasks","t","addTaskAC","task","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","then","res","resultCode","catch","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItemHandler","trim","addItem","style","textAlign","TextField","variant","disabled","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","classes","isDone","Checkbox","Delete","Todolist","useDispatch","useEffect","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","paddingTop","Button","TodolistList","useSelector","auth","thunk","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodoTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","opacity","to","Alert","elevation","ErrorSnackbar","app","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","finally","AppBar","position","Toolbar","justifyContent","edge","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.fc1de9fd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '14b0628e-63da-450d-a3cb-ba811b8ac388'\r\n    }\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\ntype AuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return  instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeType>>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n","import {setAppErrorAC, SetAppStatus, setAppStatusAC, SetAppError} from \"../app/app-reducer\";\r\nimport {ResponseType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppStatus | SetAppError>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch<SetAppStatus | SetAppError>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const setIsLoggedInAC = slice.actions.setIsLoggedInAC\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../Login/auth-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n//status === 'loading' крутилку показываем в остальных нет\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: 'ERROR' as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC (state, action: PayloadAction<{error: string | null}>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC (state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppInitializedAC (state, action: PayloadAction<{isInitialized: boolean}>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const setAppErrorAC = slice.actions.setAppErrorAC\r\nexport const setAppStatusAC = slice.actions.setAppStatusAC\r\nexport const setAppInitializedAC = slice.actions.setAppInitializedAC\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n            dispatch(setAppInitializedAC({isInitialized: true}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        } else {\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        }\r\n    })\r\n        .finally(() => {\r\n            dispatch(setAppInitializedAC({isInitialized: true}))\r\n        })\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type SetAppError = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatus = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppInitialized = ReturnType<typeof setAppInitializedAC>","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {initializeAppTC, RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: \"todolist\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC (state, action: PayloadAction<{id: string}>) {\r\n            const index = state.findIndex(tl => tl.id !== action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC (state, action: PayloadAction<{todolist: TodolistType}>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC (state, action: PayloadAction<{id: string, title: string}>) {\r\n            const index = state.findIndex(tl => tl.id !== action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC (state, action: PayloadAction<{id: string, filter: FilterValuesType}>) {\r\n            const index = state.findIndex(tl => tl.id !== action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC (state, action: PayloadAction<{id: string, status: RequestStatusType}>) {\r\n            const index = state.findIndex(tl => tl.id !== action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistAC (state, action: PayloadAction<{todolist: Array<TodolistType>}>) {\r\n            return action.payload.todolist.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n    }\r\n})\r\n\r\nexport const todolistReducer = slice.reducer\r\nexport const removeTodolistAC = slice.actions.removeTodolistAC\r\nexport const addTodolistAC = slice.actions.addTodolistAC\r\nexport const changeTodolistTitleAC = slice.actions.changeTodolistTitleAC\r\nexport const changeTodolistFilterAC = slice.actions.changeTodolistFilterAC\r\nexport const changeTodolistEntityStatusAC = slice.actions.changeTodolistEntityStatusAC\r\nexport const setTodolistAC = slice.actions.setTodolistAC\r\n\r\n// thunks\r\nexport const fetchTodolistTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistAC({todolist: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const changeTodoTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id: id, title: title}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistActionType = ReturnType<typeof setTodolistAC>;\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import {\r\n    addTodolistAC, removeTodolistAC, setTodolistAC\r\n} from './todolists-reducer'\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC (state, action: PayloadAction<{taskId: string, todolistId: string}>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC (state, action: PayloadAction<{task: TaskType}>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC (state, action: PayloadAction<{taskId: string, model: UpdateDomainTaskModelType, todolistId: string}>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC (state, action: PayloadAction<{tasks: Array<TaskType>, todolistId: string}>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(setTodolistAC, (state, action) => {\r\n            action.payload.todolist.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// actions\r\nexport const removeTaskAC = slice.actions.removeTaskAC\r\nexport const addTaskAC = slice.actions.addTaskAC\r\nexport const updateTaskAC = slice.actions.updateTaskAC\r\nexport const setTasksAC = slice.actions.setTasksAC\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks, todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC({taskId, todolistId})\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, model: domainModel, todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div style={{textAlign: \"center\"}}>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={props.disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={props.disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport classes from \"./../../../../app/App.module.css\"\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? classes.isDone : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../tasks-reducer\";\r\nimport classes from \"./Todolist.module.css\"\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [dispatch, props.todolist.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div className={classes.todolist}>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px', textAlign: \"center\"}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC, changeTodoTitleTC,\r\n    fetchTodolistTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"./tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const TodolistList: React.FC = () => {\r\n    const todolist = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolist)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(fetchTodolistTC())\r\n    }, [dispatch, isLoggedIn])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const action = updateTaskTC(id, {title: newTitle}, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value});\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodoTitleTC(id, title);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={5}>\r\n            {\r\n                todolist.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"5px\", opacity: \"0.9\"}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport const ErrorSnackbar = () => {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const isOpen = error !== null\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n            <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport {\r\n    Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField,\r\n    Button, Grid\r\n} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: true\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password';\r\n            }\r\n            return errors;\r\n\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\" style={{textAlign: \"center\"}}>\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'} rel=\"noreferrer\">here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ? (\r\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div>\r\n                        ) : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ? (\r\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div>\r\n                        ) : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                checked={formik.values.rememberMe}\r\n                                {...formik.getFieldProps(\"rememberMe\")}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'}\r\n                                color={'primary'}>Sign In</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useEffect} from 'react'\r\nimport classes from './App.module.css';\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TodolistList} from \"../features/TodolistList/TodolistList\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"../Login/Login\";\r\nimport {CircularProgress} from '@material-ui/core';\r\nimport {logoutTC} from \"../Login/auth-reducer\";\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div>\r\n            <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}><h1 style={{color: \"blue\"}}>ToDo</h1></div>\r\n            <div style={{position: 'fixed', top: '40%', textAlign: 'center', width: '100%'}}>\r\n                <CircularProgress/>\r\n            </div>\r\n        </div>\r\n    }\r\n    const handlerLogout = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className={classes.app}>\r\n            <AppBar color={\"secondary\"} position={\"static\"}>\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge={\"start\"} color={\"inherit\"} aria-label={\"Menu\"}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoList\r\n                    </Typography>\r\n                    {isLoggedIn && <Button variant={\"contained\"} color={\"primary\"} onClick={handlerLogout}>Log Out</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === \"loading\" && <LinearProgress color={\"primary\"}/>}\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistList/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                  {/*  <Route path={'/404'}\r\n                           render={() => <h1 style={{textAlign: 'center', fontSize: '50px'}}>404: PAGE NOT\r\n                               FOUND</h1>}/>*/}\r\n                    <Redirect from={'*'} to={'/login'}/>\r\n                </Switch>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import {tasksReducer} from '../features/TodolistList/tasks-reducer';\r\nimport {todolistReducer} from '../features/TodolistList/todolists-reducer';\r\nimport {combineReducers} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolist: todolistReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__fgxwH\",\"isDone\":\"App_isDone__hs6Gq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"Todolist_todolist__LYFMl\"};"],"sourceRoot":""}